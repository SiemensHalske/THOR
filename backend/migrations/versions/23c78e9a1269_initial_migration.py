"""Initial migration

Revision ID: 23c78e9a1269
Revises: 
Create Date: 2024-06-16 16:08:46.214221

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '23c78e9a1269'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
                    sa.Column('role_id', sa.Integer(), nullable=False),
                    sa.Column('role_name', sa.String(
                        length=50), nullable=False),
                    sa.PrimaryKeyConstraint('role_id')
                    )
    op.create_table('users',
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('username', sa.String(
                        length=50), nullable=False),
                    sa.Column('email', sa.String(length=100), nullable=False),
                    sa.Column('password', sa.String(
                        length=100), nullable=False),
                    sa.Column('profile_picture', sa.String(
                        length=255), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('user_id')
                    )
    op.create_table('apikeys',
                    sa.Column('api_key_id', sa.Integer(), nullable=False),
                    sa.Column('api_key', sa.String(
                        length=255), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
                    sa.PrimaryKeyConstraint('api_key_id')
                    )
    op.create_table('sensors',
                    sa.Column('sensor_id', sa.Integer(), nullable=False),
                    sa.Column('serial_number', sa.String(
                        length=100), nullable=False),
                    sa.Column('sensor_name', sa.String(
                        length=100), nullable=False),
                    sa.Column('latitude', sa.Float(), nullable=True),
                    sa.Column('longitude', sa.Float(), nullable=True),
                    sa.Column('owner_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ),
                    sa.PrimaryKeyConstraint('sensor_id')
                    )
    op.create_table('userroles',
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('role_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
                    sa.PrimaryKeyConstraint('user_id', 'role_id')
                    )
    op.create_table('lightningdetection',
                    sa.Column('lightning_id', sa.Integer(), nullable=False),
                    sa.Column('timestamp', sa.DateTime(), nullable=False),
                    sa.Column('sensor_id', sa.Integer(), nullable=True),
                    sa.Column('type', sa.String(length=50), nullable=True),
                    sa.Column('intensity', sa.Float(), nullable=True),
                    sa.Column('sensor_type', sa.String(
                        length=50), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['sensor_id'], ['sensors.sensor_id'], ),
                    sa.PrimaryKeyConstraint('lightning_id')
                    )
    op.create_table('localizationdata',
                    sa.Column('location_id', sa.Integer(), nullable=False),
                    sa.Column('latitude', sa.Float(), nullable=False),
                    sa.Column('longitude', sa.Float(), nullable=False),
                    sa.Column('address', sa.String(length=255), nullable=True),
                    sa.Column('sensor_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['sensor_id'], ['sensors.sensor_id'], ),
                    sa.PrimaryKeyConstraint('location_id')
                    )
    op.create_table('sensordata',
                    sa.Column('data_id', sa.Integer(), nullable=False),
                    sa.Column('timestamp', sa.DateTime(), nullable=False),
                    sa.Column('temperature', sa.Float(), nullable=True),
                    sa.Column('humidity', sa.Float(), nullable=True),
                    sa.Column('pressure', sa.Float(), nullable=True),
                    sa.Column('sensor_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['sensor_id'], ['sensors.sensor_id'], ),
                    sa.PrimaryKeyConstraint('data_id')
                    )
    # op.drop_table('layer')
    # op.drop_table('topology')
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('spatial_ref_sys',
                    sa.Column('srid', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('auth_name', sa.VARCHAR(length=256),
                              autoincrement=False, nullable=True),
                    sa.Column('auth_srid', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('srtext', sa.VARCHAR(length=2048),
                              autoincrement=False, nullable=True),
                    sa.Column('proj4text', sa.VARCHAR(length=2048),
                              autoincrement=False, nullable=True),
                    sa.CheckConstraint('srid > 0 AND srid <= 998999',
                                       name='spatial_ref_sys_srid_check'),
                    sa.PrimaryKeyConstraint(
                        'srid', name='spatial_ref_sys_pkey')
                    )
    op.create_table('topology',
                    sa.Column('id', sa.INTEGER(), server_default=sa.text(
                        "nextval('topology_id_seq'::regclass)"), autoincrement=True, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('srid', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('precision', sa.DOUBLE_PRECISION(precision=53),
                              autoincrement=False, nullable=False),
                    sa.Column('hasz', sa.BOOLEAN(), server_default=sa.text(
                        'false'), autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name='topology_pkey'),
                    sa.UniqueConstraint('name', name='topology_name_key'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('layer',
                    sa.Column('topology_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('layer_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('schema_name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('table_name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('feature_column', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('feature_type', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('level', sa.INTEGER(), server_default=sa.text(
                        '0'), autoincrement=False, nullable=False),
                    sa.Column('child_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['topology_id'], ['topology.id'], name='layer_topology_id_fkey'),
                    sa.PrimaryKeyConstraint(
                        'topology_id', 'layer_id', name='layer_pkey'),
                    sa.UniqueConstraint('schema_name', 'table_name', 'feature_column',
                                        name='layer_schema_name_table_name_feature_column_key')
                    )
    op.drop_table('sensordata')
    op.drop_table('localizationdata')
    op.drop_table('lightningdetection')
    op.drop_table('userroles')
    op.drop_table('sensors')
    op.drop_table('apikeys')
    op.drop_table('users')
    op.drop_table('roles')
    # ### end Alembic commands ###
